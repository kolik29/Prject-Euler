'''
Эйлер опубликовал свою замечательную квадратичную формулу:

n2+n+41
Оказалось, что согласно данной формуле можно получить 40 простых чисел, последовательно подставляя значения 0≤n≤39. Однако, при n=40, 402+40+41=40(40+1)+41 делится на 41 без остатка, и, очевидно, при n=41,412+41+41 делится на 41 без остатка.

При помощи компьютеров была найдена невероятная формула n2−79n+1601, согласно которой можно получить 80 простых чисел для последовательных значений n от 0 до 79. Произведение коэффициентов −79 и 1601 равно −126479.

Рассмотрим квадратичную формулу вида:

n2+an+b, где |a|<1000 и |b|≤1000

где |n| является модулем (абсолютным значением) n.
К примеру, |11|=11 и |−4|=4
Найдите произведение коэффициентов a и b квадратичного выражения, согласно которому можно получить максимальное количество простых чисел для последовательных значений n, начиная со значения n=0.
'''
def isPrime(n):
    if n % 2 == 0:
        return n == 2
    d = 3
    while d * d <= n and n % d != 0:
        d += 2
    return d * d > n

res = []

for a in range(0, 1000):
    for b in range(0, 1001):
        n = 0
        print([a, b])
        while True:
            if isPrime(n ** 2 + a * n + b):
                n += 1
            else:
                res.append([a, b, n])
                break

        n = 0
        while True:
            if isPrime(n ** 2 - a * n + b):
                n += 1
            else:
                res.append([-a, b, n])
                break

        n = 0
        while True:
            if isPrime(n ** 2 + a * n - b):
                n += 1
            else:
                res.append([a, -b, n])
                break

        n = 0
        while True:
            if isPrime(n ** 2 - a * n - b):
                n += 1
            else:
                res.append([-a, -b, n])
                break

max = 0
for i in res:
    if i[2] > max:
        print(i)
        max += 1